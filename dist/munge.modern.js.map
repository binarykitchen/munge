{"version":3,"file":"munge.modern.js","sources":["../src/index.js"],"sourcesContent":["const encoders = {\n  TYPES: ['ascii', 'utf8', 'random'],\n  DEFAULT: 'random',\n\n  ascii: {\n    alreadyMunged: function(str) {\n      if (str.startsWith('&#')) return str\n    },\n\n    munge: function(char) {\n      return char && char.charCodeAt()\n    }\n  },\n\n  utf8: {\n    alreadyMunged: function(str) {\n      if (str.startsWith('&#x')) return str\n    },\n\n    munge: function(char) {\n      // toString(16) converts decimal (ascii) to hex\n      var unicode = encoders.ascii.munge(char).toString(16).toUpperCase()\n\n      // pad with leading zeros to ensure 4 bytes\n      while (unicode.length < 4) {\n        unicode = '0' + unicode\n      }\n\n      return 'x' + unicode\n    }\n  },\n\n  random: {\n    alreadyMunged: function (str) {\n      return encoders.ascii.alreadyMunged(str) || encoders.utf8.alreadyMunged(str)\n    },\n\n    munge: function (char) {\n      const type = encoders.TYPES[Math.floor(Math.random() * encoders.TYPES.length)]\n      return encoders[type].munge(char)\n    }\n  }\n}\n\n/**\n * the one and only public function of this module. It takes any string and munges\n * it according to the options. By default it uses a random encoding.\n *\n *\n * @param {String} str any string to munge, for example 'spacemonkey@moon.com'\n * @param {Object} options for munging\n * @param options.encoding can be 'ascii', 'utf8' or 'random' (default)\n * @return {String} the munged string\n * @api public\n */\nmodule.exports = function (str, options) {\n  const aMunged = []\n  var aChars, i\n\n  //  initialize default options\n  options = options || {}\n\n  if (options.encoding) {\n    // validate encoding option\n    if (encoders.TYPES.indexOf(options.encoding) < 0) {\n      throw Error('Invalid encoding option given: ' + options.encoding)\n    }\n  } else {\n    options.encoding = encoders.DEFAULT\n  }\n\n  const encoder = encoders[options.encoding]\n\n  if (str) {\n    if (encoder.alreadyMunged(str)) {\n      return str\n    }\n\n    aChars = str.split('')\n\n    for (i in aChars) {\n      aMunged[i] = '&#' + encoder.munge(aChars[i]) + ';'\n    }\n  }\n\n  return aMunged.join('')\n}\n"],"names":["encoders","TYPES","DEFAULT","ascii","alreadyMunged","str","startsWith","munge","char","charCodeAt","utf8","unicode","toString","toUpperCase","length","random","type","Math","floor","module","exports","options","aMunged","aChars","i","encoding","indexOf","Error","encoder","split","join"],"mappings":"AAAA,MAAMA,EAAW,CACfC,MAAO,CAAC,QAAS,OAAQ,UACzBC,QAAS,SAETC,MAAO,CACLC,cAAe,SAASC,GACtB,GAAIA,EAAIC,WAAW,MAAO,OAAOD,GAGnCE,MAAO,SAASC,GACd,OAAOA,GAAQA,EAAKC,eAIxBC,KAAM,CACJN,cAAe,SAASC,GACtB,GAAIA,EAAIC,WAAW,OAAQ,OAAOD,GAGpCE,MAAO,SAASC,GAKd,IAHA,IAAIG,EAAUX,EAASG,MAAMI,MAAMC,GAAMI,SAAS,IAAIC,cAG/CF,EAAQG,OAAS,GACtBH,EAAU,IAAMA,EAGlB,MAAO,IAAMA,IAIjBI,OAAQ,CACNX,cAAe,SAAUC,GACvB,OAAOL,EAASG,MAAMC,cAAcC,IAAQL,EAASU,KAAKN,cAAcC,IAG1EE,MAAO,SAAUC,GACf,MAAMQ,EAAOhB,EAASC,MAAMgB,KAAKC,MAAMD,KAAKF,SAAWf,EAASC,MAAMa,SACtE,OAAOd,EAASgB,GAAMT,MAAMC,MAgBlCW,OAAOC,QAAU,SAAUf,EAAKgB,GAC9B,MAAMC,EAAU,GAChB,IAAIC,EAAQC,EAKZ,IAFAH,EAAUA,GAAW,IAETI,UAEV,GAAIzB,EAASC,MAAMyB,QAAQL,EAAQI,UAAY,EAC7C,MAAME,MAAM,kCAAoCN,EAAQI,eAG1DJ,EAAQI,SAAWzB,EAASE,QAG9B,MAAM0B,EAAU5B,EAASqB,EAAQI,UAEjC,GAAIpB,EAAK,CACP,GAAIuB,EAAQxB,cAAcC,GACxB,OAAOA,EAKT,IAAKmB,KAFLD,EAASlB,EAAIwB,MAAM,IAGjBP,EAAQE,GAAK,KAAOI,EAAQrB,MAAMgB,EAAOC,IAAM,IAInD,OAAOF,EAAQQ,KAAK"}